{"version":3,"sources":["components/properties.js","App.js","serviceWorker.js","index.js"],"names":["Properties","props","state","showDescription","images","fetchPropertyDetails","e","propertyId","target","getAttribute","fetch","then","res","json","data","result","JSON","parse","image","setState","catch","console","log","bind","this","properties","map","property","index","id","key","data-item","onClick","style","textDecoration","color","name","address","city","zip_code","county","phone","type","capacity","className","src","Component","App","handleSubmit","reloadComponent","getData","input","value","window","location","reload","filterProperties","preventDefault","onSubmit","ref","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.238ee89e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Properties extends Component {\n  constructor(props) {\n    super(props);\n    this.fetchPropertyDetails = this.fetchPropertyDetails.bind(this);\n  }\n  state = {\n    showDescription: false,\n    images: []\n  };\n\n  fetchPropertyDetails = (e) => {\n    const propertyId = e.target.getAttribute('data-item');\n    fetch(`http://localhost:4000/images/?propertyId=${propertyId}`)\n    .then(res => res.json())\n    .then((data) => {\n      const result = JSON.parse(data.image);\n      this.setState({ images: result });\n    })\n    .catch(console.log)\n    const { showDescription } = this.state;\n    this.setState({\n        showDescription: !showDescription,\n    });\n  }\n  render() {\n    const { showDescription } = this.state;\n    return (\n         <div>\n            {!showDescription && (\n                 <div>\n                     <table>\n                      <thead>\n                        <tr>\n                          <th>Id</th>\n                          <th>Name</th>\n                          <th>Address</th>\n                          <th>City</th>\n                          <th>State</th>\n                          <th>Zip Code</th>\n                          <th>County</th>\n                          <th>Phone</th>\n                          <th>Type</th>\n                          <th>Capacity</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                          {this.props.properties.map((property, index) => (\n                              <tr>\n                                  <td>{property.id}</td>\n                                  <td key={index} data-item={property.id} onClick={this.fetchPropertyDetails}\n                                      style={{ textDecoration: 'underline', color: 'blue' }}\n                                  >\n                                      {property.name}\n                                  </td>\n                                  <td>{property.address}</td>\n                                  <td>{property.city}</td>\n                                  <td>{property.state}</td>\n                                  <td>{property.zip_code}</td>\n                                  <td>{property.county}</td>\n                                  <td>{property.phone}</td>\n                                  <td>{property.type}</td>\n                                  <td>{property.capacity}</td>\n\n                              </tr>\n                            ))}\n                       </tbody>\n                     </table>\n                 </div>\n            )}\n            {showDescription && (\n                <div className={\"row\"}>\n                  {this.state.images.map(image =>\n                      <div className={\"column\"}>\n                        <img src={image} />\n                      </div>)}\n                </div>\n            )}\n         </div>\n    );\n  }\n}\nexport default Properties;\n","import React,{Component} from 'react';\nimport Properties from './components/properties';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.reloadComponent = this.reloadComponent.bind(this);\n  }\n  state = {\n    properties: []\n  }\n\n  componentDidMount() {\n    // before loading the application call property api\n    this.getData();\n  }\n\n  getData(){\n    fetch('http://localhost:4000/properties')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ properties: data });\n      this.input.value=null;\n    })\n    .catch(console.log)\n  }\n\n  // load the component\n  reloadComponent(){\n    window.location.reload();\n  }\n\n  // api call for filter property by name, city, state\n  filterProperties(input) {\n    fetch(`http://localhost:4000/filterItem/?filterItem=${input}`)\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ properties: data });\n    })\n    .catch(console.log)\n  }\n\n  handleSubmit(e) {\n    this.filterProperties(this.input.value);\n    e.preventDefault();\n  }\n\n  render() {\n      return (\n         <div>\n           <div  className={\"centered\"}>\n              <form onSubmit={this.handleSubmit}>\n                <label>\n                  Search Key:\n                  <input type=\"text\" ref={(input) => this.input = input} />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n                <button type=\"button\" onClick={this.reloadComponent}> <span>Reload</span> </button>\n              </form>\n           </div>\n           <div  className={\"centered\"}>\n              <Properties properties={this.state.properties} />\n           </div>\n         </div>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}